# # pages/9_Correlaciones.py

# import streamlit as st
# import pandas as pd
# import seaborn as sns
# import matplotlib.pyplot as plt

# st.set_page_config(
#     page_title="An√°lisis de Correlaciones",
#     page_icon="üèéÔ∏è",
#     layout="wide",
# )

# st.write("# An√°lisis de Correlaciones üìä")

# st.markdown("""
# Explora las correlaciones entre diferentes variables en los datos de F√≥rmula 1.
# """)

# # Cargar datasets
# results = pd.read_csv('data/results.csv')

# # Seleccionar variables num√©ricas
# numeric_cols = ['grid', 'positionOrder', 'points', 'laps', 'milliseconds']

# # Crear matriz de correlaci√≥n
# corr_matrix = results[numeric_cols].corr()

# # Mostrar la matriz de correlaci√≥n
# st.write("## Matriz de Correlaci√≥n")

# fig, ax = plt.subplots()
# sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', ax=ax)
# st.pyplot(fig)

# # An√°lisis adicional
# st.markdown("""
# Podemos observar que existe una correlaci√≥n negativa entre la posici√≥n de salida ('grid') y la posici√≥n final ('positionOrder'), lo que indica que los pilotos que empiezan en posiciones delanteras tienden a terminar en mejores posiciones.
# """)


# pages/9_Correlaciones.py

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

st.set_page_config(
    page_title="An√°lisis de Correlaciones",
    page_icon="üèéÔ∏è",
    layout="wide",
)

st.write("# An√°lisis de Correlaciones üìä")

st.markdown("""
Explora las correlaciones entre diferentes variables en los datos de F√≥rmula 1.
""")

# Cargar datasets
results = pd.read_csv('data/results.csv')

# Reemplazar valores no num√©ricos como '\\N' con NaN
results.replace('\\N', np.nan, inplace=True)

# Convertir las columnas num√©ricas a tipo num√©rico (si contienen alg√∫n valor no convertible a float)
numeric_cols = ['grid', 'positionOrder', 'points', 'laps', 'milliseconds']
results[numeric_cols] = results[numeric_cols].apply(pd.to_numeric, errors='coerce')

# Crear matriz de correlaci√≥n, eliminando valores NaN
corr_matrix = results[numeric_cols].corr()

# Mostrar la matriz de correlaci√≥n
st.write("## Matriz de Correlaci√≥n")

fig, ax = plt.subplots()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', ax=ax)
st.pyplot(fig)

# An√°lisis adicional
st.markdown("""
Podemos observar que existe una correlaci√≥n negativa entre la posici√≥n de salida ('grid') y la posici√≥n final ('positionOrder'), lo que indica que los pilotos que empiezan en posiciones delanteras tienden a terminar en mejores posiciones.
""")
